-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\FPGA_SMC\FPGA_SMC.vhd
-- Created: 2020-12-13 17:04:02
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.2
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Control_signal                ce_out        0.2
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FPGA_SMC
-- Source Path: FPGA_SMC
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY FPGA_SMC IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Actual_Speed                      :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        Desired_Speed                     :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        ce_out                            :   OUT   std_logic;
        Control_signal                    :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
        );
END FPGA_SMC;


ARCHITECTURE rtl OF FPGA_SMC IS

  -- Component Declarations
  COMPONENT nfp_sub_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT Model
    PORT( w                               :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          dw                              :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_signum_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_abs_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_sqrt_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_mul_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_add2_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_add_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_relop_double_block
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT nfp_relop_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_sub_double
    USE ENTITY work.nfp_sub_double(rtl);

  FOR ALL : Model
    USE ENTITY work.Model(rtl);

  FOR ALL : nfp_signum_double
    USE ENTITY work.nfp_signum_double(rtl);

  FOR ALL : nfp_abs_double
    USE ENTITY work.nfp_abs_double(rtl);

  FOR ALL : nfp_sqrt_double
    USE ENTITY work.nfp_sqrt_double(rtl);

  FOR ALL : nfp_mul_double
    USE ENTITY work.nfp_mul_double(rtl);

  FOR ALL : nfp_add2_double
    USE ENTITY work.nfp_add2_double(rtl);

  FOR ALL : nfp_add_double
    USE ENTITY work.nfp_add_double(rtl);

  FOR ALL : nfp_relop_double_block
    USE ENTITY work.nfp_relop_double_block(rtl);

  FOR ALL : nfp_relop_double
    USE ENTITY work.nfp_relop_double(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Sum_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL dw                               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sign_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Abs1_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sqrt1_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL mu_out1                          : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_op_stage2                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_2                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sign1_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Discrete_Time_Integrator_u_gain  : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Discrete_Time_Integrator_x_reg   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Discrete_Time_Integrator_u_add   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL beta_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum1_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Upperlimit_out                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL LowerRelop_out                   : std_logic;
  SIGNAL Lowerlimit_out                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL UpperRelop_out                   : std_logic;
  SIGNAL Switch1_out                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Saturation_out1                  : std_logic_vector(63 DOWNTO 0);  -- ufix64

BEGIN
  u_nfp_sub_comp : nfp_sub_double
    PORT MAP( nfp_in1 => Actual_Speed,  -- double
              nfp_in2 => Desired_Speed,  -- double
              nfp_out => Sum_out1  -- double
              );

  u_Model : Model
    PORT MAP( w => Actual_Speed,  -- double
              dw => dw  -- double
              );

  u_nfp_signum_comp : nfp_signum_double
    PORT MAP( nfp_in => Sum_out1,  -- double
              nfp_out => Sign_out1  -- double
              );

  u_nfp_abs_comp : nfp_abs_double
    PORT MAP( nfp_in => Sum_out1,  -- double
              nfp_out => Abs1_out1  -- double
              );

  u_nfp_sqrt_comp : nfp_sqrt_double
    PORT MAP( nfp_in => Abs1_out1,  -- double
              nfp_out => Sqrt1_out1  -- double
              );

  u_nfp_mul_comp : nfp_mul_double
    PORT MAP( nfp_in1 => Sign_out1,  -- double
              nfp_in2 => Sqrt1_out1,  -- double
              nfp_out => Product_out1  -- double
              );

  u_nfp_mul_comp_1 : nfp_mul_double
    PORT MAP( nfp_in1 => kconst,  -- double
              nfp_in2 => Product_out1,  -- double
              nfp_out => mu_out1  -- double
              );

  u_nfp_add2_comp : nfp_add2_double
    PORT MAP( nfp_in1 => dw,  -- double
              nfp_in2 => mu_out1,  -- double
              nfp_out => Sum1_op_stage2  -- double
              );

  u_nfp_signum_comp_1 : nfp_signum_double
    PORT MAP( nfp_in => Sum_out1,  -- double
              nfp_out => Sign1_out1  -- double
              );

  u_nfp_mul_comp_2 : nfp_mul_double
    PORT MAP( nfp_in1 => kconst_2,  -- double
              nfp_in2 => Sign1_out1,  -- double
              nfp_out => Discrete_Time_Integrator_u_gain  -- double
              );

  u_nfp_add_comp : nfp_add_double
    PORT MAP( nfp_in1 => Discrete_Time_Integrator_x_reg,  -- double
              nfp_in2 => Discrete_Time_Integrator_u_gain,  -- double
              nfp_out => Discrete_Time_Integrator_u_add  -- double
              );

  u_nfp_mul_comp_3 : nfp_mul_double
    PORT MAP( nfp_in1 => kconst_1,  -- double
              nfp_in2 => Discrete_Time_Integrator_x_reg,  -- double
              nfp_out => beta_out1  -- double
              );

  u_nfp_sub_comp_1 : nfp_sub_double
    PORT MAP( nfp_in1 => Sum1_op_stage2,  -- double
              nfp_in2 => beta_out1,  -- double
              nfp_out => Sum1_out1  -- double
              );

  u_nfp_relop_comp : nfp_relop_double_block
    PORT MAP( nfp_in1 => Sum1_out1,  -- double
              nfp_in2 => Upperlimit_out,  -- double
              nfp_out1 => LowerRelop_out
              );

  u_nfp_relop_comp_1 : nfp_relop_double
    PORT MAP( nfp_in1 => Sum1_out1,  -- double
              nfp_in2 => Lowerlimit_out,  -- double
              nfp_out1 => UpperRelop_out
              );

  kconst <= X"4034000000000000";

  kconst_1 <= X"4059000000000000";

  kconst_2 <= X"3fc999999999999a";

  enb <= clk_enable;

  Discrete_Time_Integrator_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Discrete_Time_Integrator_x_reg <= X"0000000000000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Discrete_Time_Integrator_x_reg <= Discrete_Time_Integrator_u_add;
      END IF;
    END IF;
  END PROCESS Discrete_Time_Integrator_reg_process;


  Upperlimit_out <= X"4014000000000000";

  Lowerlimit_out <= X"c014000000000000";

  
  Switch1_out <= Sum1_out1 WHEN UpperRelop_out = '0' ELSE
      Lowerlimit_out;

  
  Saturation_out1 <= Switch1_out WHEN LowerRelop_out = '0' ELSE
      Upperlimit_out;

  ce_out <= clk_enable;

  Control_signal <= Saturation_out1;

END rtl;

